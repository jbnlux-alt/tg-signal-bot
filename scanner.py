import os, asyncio, time, math
import httpx

API_BASE = os.environ.get("MEXC_API_BASE", "https://api.mexc.com")
SCAN_SYMBOLS = [s.strip().upper() for s in os.environ.get("SCAN_SYMBOLS", "BTCUSDT,ETHUSDT,SOLUSDT,DOGEUSDT,SHIBUSDT").split(",")]
PUMP_THRESHOLD = float(os.environ.get("PUMP_THRESHOLD", "0.70"))  # 0.70 = 70%
SCAN_INTERVAL = int(os.environ.get("SCAN_INTERVAL", "10"))        # seconds
RSI_MIN = float(os.environ.get("RSI_MIN", "70"))                  # RSI must be >= 70

# MEXC 1m klines endpoint (—Å–æ–≤–º–µ—Å—Ç–∏–º —Å Binance-–ø–æ–¥–æ–±–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —É MEXC)
# –ï—Å–ª–∏ —É —Ç–µ–±—è –¥—Ä—É–≥–æ–π –ø—É—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ–Ω—è–π URL-—à–∞–±–ª–æ–Ω –Ω–∏–∂–µ.
KLINES_URL = API_BASE + "/api/v3/klines"

async def fetch_klines(symbol: str, limit: int = 100):
    params = {"symbol": symbol, "interval": "1m", "limit": str(limit)}
    async with httpx.AsyncClient(timeout=10) as client:
        r = await client.get(KLINES_URL, params=params)
        r.raise_for_status()
        return r.json()

def rsi(values, period=14):
    if len(values) < period + 1:
        return None
    gains = []
    losses = []
    for i in range(1, period + 1):
        delta = values[-i] - values[-i-1]
        gains.append(max(delta, 0))
        losses.append(max(-delta, 0))
    avg_gain = sum(gains) / period
    avg_loss = sum(losses) / period
    if avg_loss == 0:
        return 100.0
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

async def check_symbol(symbol: str):
    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π 1m
    data = await fetch_klines(symbol, limit=100)
    # –§–æ—Ä–º–∞—Ç: [openTime, open, high, low, close, volume, ...]
    closes = [float(x[4]) for x in data]
    # –°–º–æ—Ç—Ä–∏–º –ø–∞–º–ø –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–Ω—É—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π close
    last_close = closes[-1]
    prev_close = closes[-2]
    change = (last_close - prev_close) / prev_close  # –¥–æ–ª—è (0.7 = 70%)
    # RSI
    r = rsi(closes, period=14)
    return change, r, last_close

async def scanner_loop(bot, chat_id: int):
    while True:
        start = time.time()
        try:
            for sym in SCAN_SYMBOLS:
                try:
                    change, rsi_val, price = await check_symbol(sym)
                except Exception:
                    # —Ç–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã/—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
                    continue

                if change >= PUMP_THRESHOLD and (rsi_val is not None and rsi_val >= RSI_MIN):
                    pct = round(change * 100, 2)
                    rsi_txt = f"{rsi_val:.2f}" if rsi_val is not None else "n/a"

                    tv_symbol = sym  # –¥–ª—è TradingView –∏—Å–ø–æ–ª—å–∑—É–µ–º BINANCE: –∫–∞–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                    msg = (
                        f"üö® –ê–Ω–æ–º–∞–ª—å–Ω—ã–π –ø–∞–º–ø: +{pct}% –∑–∞ 1 –º–∏–Ω—É—Ç—É\n"
                        f"üìâ –ú–æ–Ω–µ—Ç–∞: ${sym}\n"
                        f"üíµ –¶–µ–Ω–∞: {price}\n\n"
                        f"üìä –£—Å–ª–æ–≤–∏—è:\n"
                        f"‚úÖ RSI: {rsi_txt} (–º–∏–Ω {int(RSI_MIN)})\n"
                        f"‚úÖ –ü–æ—Ä–æ–≥ –ø–∞–º–ø–∞: {int(PUMP_THRESHOLD*100)}%\n"
                        f"üïí –¢–∞–π–º—Ñ—Ä–µ–π–º: 1m\n\n"
                        f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º SHORT (MVP)\n"
                        f"üí∞ –†–∏—Å–∫: 0.1% | –¢–µ–π–∫: 250%\n"
                    )

                    # –ö–Ω–æ–ø–∫–∏
                    mexc_url = f"https://www.mexc.com/exchange/{sym.replace('USDT','')}_USDT"
                    tv_url = f"https://www.tradingview.com/chart/?symbol=BINANCE:{sym}"
                    reply_markup = {
                        "inline_keyboard": [
                            [{"text": "üîò –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É –Ω–∞ MEXC", "url": mexc_url}],
                            [{"text": "üìà –°–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ (TV)", "url": tv_url}],
                        ]
                    }

                    await bot.send_message(
                        chat_id=chat_id,
                        text=msg,
                        reply_markup=reply_markup
                    )

        except Exception:
            # –≥–∞—Å–∏–º –ª—é–±—ã–µ –ø–∞–¥–µ–Ω–∏—è —Ü–∏–∫–ª–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–∏—Ç—å
            pass

        # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        elapsed = time.time() - start
        await asyncio.sleep(max(1, SCAN_INTERVAL - int(elapsed)))
