import os
import time
import requests
from datetime import datetime

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
QUOTE = "USDT"  # —Ç–æ—Ä–≥—É–µ–º–∞—è –ø–∞—Ä–∞ –∫ USDT
PUMP_THRESHOLD = 0.01  # 1% –∑–∞ –º–∏–Ω—É—Ç—É
RSI_MIN = 70  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π RSI –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
SYMBOL_REFRESH_SEC = int(os.getenv("SYMBOL_REFRESH_SEC", 86400))  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä —Ä–∞–∑ –≤ –¥–µ–Ω—å

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ ---
symbols = []
last_refresh = 0

# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram ---
def send_signal(msg):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": msg, "parse_mode": "HTML"}
    try:
        requests.post(url, json=payload, timeout=10)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# --- –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä ---
def fetch_symbols():
    url = "https://api.binance.com/api/v3/exchangeInfo"
    try:
        resp = requests.get(url, timeout=10).json()
        pairs = [s["symbol"] for s in resp["symbols"] if s["symbol"].endswith(QUOTE)]
        print(f"[INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pairs)} –ø–∞—Ä")
        return pairs
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä: {e}")
        return []

# --- –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –∏ —Å—á–∏—Ç–∞–µ–º RSI ---
def get_rsi(symbol, interval="1m", period=14):
    try:
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={period+1}"
        klines = requests.get(url, timeout=10).json()
        closes = [float(k[4]) for k in klines]
        gains, losses = [], []
        for i in range(1, len(closes)):
            diff = closes[i] - closes[i - 1]
            if diff >= 0:
                gains.append(diff)
                losses.append(0)
            else:
                gains.append(0)
                losses.append(abs(diff))
        avg_gain = sum(gains) / period
        avg_loss = sum(losses) / period
        if avg_loss == 0:
            return 100
        rs = avg_gain / avg_loss
        return 100 - (100 / (1 + rs))
    except Exception as e:
        print(f"[ERROR] RSI {symbol}: {e}")
        return None

# --- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã ---
def check_signal(sym):
    try:
        # –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å –∏ –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥
        url = f"https://api.binance.com/api/v3/klines?symbol={sym}&interval=1m&limit=2"
        klines = requests.get(url, timeout=10).json()
        price_old = float(klines[0][4])
        price_new = float(klines[1][4])
        change = (price_new - price_old) / price_old

        rsi_val = get_rsi(sym)

        if change >= PUMP_THRESHOLD and (rsi_val is not None and rsi_val >= RSI_MIN):
            pct = round(change * 100, 2)
            rsi_txt = f"{rsi_val:.2f}"
            mexc_url = f"https://www.mexc.com/exchange/{sym.replace(QUOTE,'')}_{QUOTE}"
            tv_url = f"https://www.tradingview.com/chart/?symbol=BINANCE:{sym}"
            msg = (
                f"üö® –ê–Ω–æ–º–∞–ª—å–Ω—ã–π –ø–∞–º–ø: +{pct}% –∑–∞ 1 –º–∏–Ω\n"
                f"üìâ –ú–æ–Ω–µ—Ç–∞: ${sym}\n"
                f"üíµ –¶–µ–Ω–∞: {price_new}\n\n"
                f"üìä –£—Å–ª–æ–≤–∏—è:\n"
                f"‚úÖ RSI: {rsi_txt} (–º–∏–Ω {int(RSI_MIN)})\n"
                f"‚úÖ –ü–æ—Ä–æ–≥ –ø–∞–º–ø–∞: {int(PUMP_THRESHOLD*100)}%\n"
                f"üïí –¢–∞–π–º—Ñ—Ä–µ–π–º: 1m\n\n"
                f"üéØ SHORT (MVP)\n"
                f"üí∞ –†–∏—Å–∫: 0.1% | –¢–µ–π–∫: 250%\n\n"
                f"üìà <a href='{tv_url}'>TradingView</a> | <a href='{mexc_url}'>MEXC</a>"
            )
            send_signal(msg)
    except Exception as e:
        print(f"[ERROR] –°–∏–≥–Ω–∞–ª {sym}: {e}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
def scanner_loop():
    global symbols, last_refresh
    while True:
        now = time.time()
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
        if now - last_refresh > SYMBOL_REFRESH_SEC or not symbols:
            symbols = fetch_symbols()
            last_refresh = now

        for sym in symbols:
            check_signal(sym)

        time.sleep(2)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ —Ä–∞–∑–Ω—ã–º –º–æ–Ω–µ—Ç–∞–º

if __name__ == "__main__":
    print("[INFO] –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞...")
    scanner_loop()

